{
 "metadata": {
  "name": "",
  "signature": "sha256:d773a509b5f33dc2c4190df18ca465ad1e0a0b9a9afa036aade708547909995e"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Importing a bunch of packages, probably don't need all of them"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import numpy as np\n",
      "import re\n",
      "import pandas as pd\n",
      "from itertools import combinations\n",
      "from itertools import groupby\n",
      "from collections import Counter\n",
      "import json\n",
      "import pyparsing as py\n",
      "import codecs\n",
      "import matplotlib.pyplot as plt\n",
      "import ast\n",
      "import operator\n",
      "from __future__ import division\n",
      "import random\n",
      "import math\n",
      "import jellyfish as jf\n",
      "import difflib\n",
      "import scipy"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 1
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "from xml.dom import minidom"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 2
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import urllib\n",
      "import urllib2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 3
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import requests"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 4
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "import json"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 5
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "function to remove common internet title words from results"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def remove_internet_words(name, words):\n",
      "    new_word=name\n",
      "    for x in words:\n",
      "        if x in new_word:\n",
      "            new_word=new_word.replace(x,'').strip()\n",
      "    return new_word.strip()"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 6
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "internet_words=[ 'Welcome to', 'welcome to','website', 'site' 'welcome','Personal','home', 'webpage','Website','Page', 'Site' ,'Welcome', 'Webpage', 'Official', 'Home', 'Homepage']"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 7
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "function to create the proper url format for Bing's API"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "def url(query):\n",
      "    query = urllib.quote(query)\n",
      "    return'https://api.datamarket.azure.com/Bing/Search/v1/News?Query=%27'+query+'%27'"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 10
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Using Toll Bros Inc as an example"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "search='TOLL BROS. INC'"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 11
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "This pulls the results, and formats the first result's title"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "auth = 'Basic %s' % (':%s' % 'j9li7rs9FIS1W2KhVRBVvcD5gJCXiAIG68OIUHhqicw').encode('base64')[:-1] \n",
      "request=urllib2.Request(url(search))\n",
      "request_opener = urllib2.build_opener()\n",
      "request.add_header('Authorization', auth)\n",
      "response = request_opener.open(request)\n",
      "response_data = response.read()\n",
      "my_list=response_data.split(\"<\")\n",
      "search_titles=[]\n",
      "for x in my_list:\n",
      "    if 'd:Title m' in x:\n",
      "        y=x.split(\">\")\n",
      "        search_titles.append(y[1])\n",
      "if len(search_titles)==0:\n",
      "    search_titles.append(search)\n",
      "search_titles2=[]\n",
      "for x in search_titles:\n",
      "    x=x.replace('...','')\n",
      "new_title=search_titles[0]\n",
      "positions=[]\n",
      "for x in new_title:\n",
      "    if x=='.':\n",
      "        positions.append(new_title.index(x))\n",
      "fix=list(new_title)\n",
      "for x in positions:\n",
      "    try:\n",
      "        if new_title[x+2].isupper():\n",
      "            fix[x]=':'\n",
      "            new_title=\"\".join(fix)\n",
      "    except:\n",
      "        None\n",
      "unicode_content = new_title.decode('utf-8')\n",
      "new_title2=unicode(unicode_content)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Same idea as above, but for the URL"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "search_titles3=[]\n",
      "for x in my_list:\n",
      "    if 'd:Url m' in x:\n",
      "        y=x.split(\">\")\n",
      "        search_titles3.append(y[1])\n",
      "if len(search_titles3)==0:\n",
      "    search_titles3.append(search)\n",
      "search_titles4=[]\n",
      "for x in search_titles3:\n",
      "    x=x.replace('...','')\n",
      "new_title2=search_titles3[0]\n",
      "positions2=[]\n",
      "for x in new_title2:\n",
      "    if x=='.':\n",
      "        positions2.append(new_title2.index(x))\n",
      "fix2=list(new_title2)\n",
      "for x in positions2:\n",
      "    try:\n",
      "        if new_title2[x+2].isupper():\n",
      "            fix2[x]=':'\n",
      "            new_title2=\"\".join(fix2)\n",
      "    except:\n",
      "        None\n",
      "unicode_content2 = new_title2.decode('utf-8')\n",
      "new_title3=unicode(unicode_content2)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 19
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Same idea as above, but for the description"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "search_titles5=[]\n",
      "for x in my_list:\n",
      "    if 'd:Description m' in x:\n",
      "        y=x.split(\">\")\n",
      "        search_titles5.append(y[1])\n",
      "if len(search_titles5)==0:\n",
      "    search_titles5.append(search)\n",
      "search_titles6=[]\n",
      "for x in search_titles5:\n",
      "    x=x.replace('...','')\n",
      "new_title4=search_titles5[0]\n",
      "positions3=[]\n",
      "for x in new_title4:\n",
      "    if x=='.':\n",
      "        positions3.append(new_title4.index(x))\n",
      "fix3=list(new_title4)\n",
      "for x in positions3:\n",
      "    try:\n",
      "        if new_title4[x+2].isupper():\n",
      "            fix3[x]=':'\n",
      "            new_title4=\"\".join(fix3)\n",
      "    except:\n",
      "        None\n",
      "unicode_content3 = new_title4.decode('utf-8')\n",
      "new_title4=unicode(unicode_content3)"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 21
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": [
      "Shows the format of the first result when searching 'TOLL BROS. INC'"
     ]
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"Title: \"+new_title"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Title: Toll Brothers Receives \u201cBBB-\u201d Credit Rating from Morningstar (TOL)\n"
       ]
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"URL: \"+new_title2"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "URL: http://sleekmoney.com/toll-brothers-receives-bbb-credit-rating-from-morningstar-tol/81332/\n"
       ]
      }
     ],
     "prompt_number": 25
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [
      "print \"Description: \"+new_title4"
     ],
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": [
        "Description: On average, analysts predict that Toll Brothers will post $1.86 earnings per share for the current fiscal year. Toll Brothers, Inc designs, builds, markets and arranges financing for detached and attached homes in luxury residential communities.\n"
       ]
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": [],
     "language": "python",
     "metadata": {},
     "outputs": []
    }
   ],
   "metadata": {}
  }
 ]
}
